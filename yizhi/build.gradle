apply plugin: 'com.android.application'
apply plugin: 'bugly'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
bugly {
    appId = "c73ecc54da"
    appKey = "27580d71-8095-4e00-8212-85b9ddf985a4"
}
def buildTime() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd')
    return formattedDate
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 10
        versionName "1.10"
        applicationId "com.xiaoqi.ceshisssssss"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi', 'armeabi-v7a', 'x86'
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            //Zipalign优化
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            // 不显示Log
         //   buildConfigField "boolean", "LOG_DEBUG", "false"
            //混淆
            minifyEnabled false
            //Zipalign优化
          //  zipAlignEnabled true
            // 移除无用的resource文件
         //   shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

        }
    }

    dexOptions {
        preDexLibraries = false
    }
    lintOptions{
        checkReleaseBuilds false
        abortOnError false
    }
}
def sJpush = "3.1.1", // maven sJpush远程库版本
    sJcore = "1.1.9", // maven sJcore远程库版本
    sjanalytics = "1.2.0" // maven sjanalytics远程库版本
dependencies {
    compile fileTree(include: '*.jar', dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    //Butterknife
    //    compile "com.jakewharton:butterknife:$rootProject.butterknifeVersion"
    annotationProcessor "com.jakewharton:butterknife-compiler:$rootProject.butterknifeVersion"
    testCompile 'junit:junit:4.12'
    compile project(':sdk')
    compile files('src/main/jniLibs/android-async-http-1.4.8.jar')
    compile files('src/main/jniLibs/bugly_agent.jar')
    compile files('src/main/jniLibs/bugly_crash_release.jar')
    compile files('src/main/jniLibs/org.apache.http.legacy.jar')
    implementation "cn.jiguang.sdk:jpush:$sJpush"
    implementation "cn.jiguang.sdk:jcore:$sJcore"
    implementation "cn.jiguang.sdk:janalytics:$sjanalytics"
    implementation zxing
}
def rootPath = getRootDir().absolutePath
def cName = getName()

def modelConfig = pluginConfigs[cName]

println("plugin-config: $modelConfig")

android {

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    signingConfigs {
        release {
            // 签名
            keyAlias signingRelease.keyAlias
            keyPassword signingRelease.keyPassword
            storeFile signingRelease.storeFile
            storePassword signingRelease.storePassword
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    aaptOptions {
        cruncherEnabled = false
    }

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        applicationId modelConfig["pluginPackageName"]
        versionCode modelConfig["pluginVersion"]
        versionName modelConfig["pluginVersionName"]
        buildConfigField "boolean", "isPlugin", "$isPlugin"

        manifestPlaceholders = [
                pluginVer: modelConfig["pluginVer"],
                "JPUSH_PKGNAME":applicationId,
                "JPUSH_APPKEY":"c7ba5b084c4742a8a347f7df",
                "JPUSH_CHANNEL":"developer-default"
        ]
    }

    buildTypes {
        release {
            shrinkResources false//打开资源压缩
            signingConfig signingConfigs.release //Add your own signing config
        }
    }
    dexOptions {
        preDexLibraries = false
    }
    lintOptions{
        checkReleaseBuilds false
        abortOnError false
    }
}

dependencies {
    implementation repluginplugin
    if (isPlugin) {
        provided "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    } else {
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    }
}

configurations {
//    all*.exclude group: 'com.android.support'
}

if (isPlugin) {
    // 这个plugin需要放在android配置之后，因为需要读取android中的配置项
    apply plugin: 'replugin-plugin-gradle'
    repluginPluginConfig {
        pluginName = modelConfig["pluginPackageName"]
        hostApplicationId = "co.tiangongsky.bxsdkdemo"
        hostAppLauncherActivity = "co.tiangongsky.bxsdkdemo.ui.start.StartActivity"
    }

    // debug

    def extName = '.jar'
    def folder = 'plugins'
    if (!modelConfig['pliginIsInner']) {
        extName = '.apk'
        folder = 'external'
    }
    task "buildDebug${cName}JarToHost"(type: Copy, dependsOn: ['assembleDebug']) {
        group 'abuildjartohost'
        from("$rootPath/$cName/build/outputs/apk/debug/$cName-debug.apk") //从这个目录下取出默认apk包
        into("$rootPath/host/src/main/assets/$folder/") //将jar包输出到指定目录下
        rename("$cName-debug.apk", "$cName-debug$extName") //自定义jar包的名字
    }

    task buildDebugJarToHost(dependsOn: "buildDebug${cName}JarToHost") {
        group 'abuildjartohost'
    }

    task "buildRelease${cName}JarToHost"(type: Copy, dependsOn: ['assembleRelease']) {
        group 'abuildjartohost'
        from("$rootPath/$cName/build/outputs/apk/release/$cName-release.apk") //从这个目录下取出默认apk包
        into("$rootPath/host/src/main/assets/$folder/") //将jar包输出到指定目录下
        rename("$cName-release.apk", "${modelConfig["pluginPackageName"]}$extName") //自定义jar包的名字
    }

    task buildReleaseJarToHost(dependsOn: "buildRelease${cName}JarToHost") {
        group 'abuildjartohost'
    }

    task "buildRelease${cName}ApkProduce"(type: Copy, dependsOn: ['assembleRelease']) {
        group 'abuildproduceapk'
        from("$rootPath/$cName/build/outputs/apk/release/$cName-release.apk") //从这个目录下取出默认apk包
        into("$rootPath/apk/plugins") //将jar包输出到指定目录下
        rename("$cName-release.apk", "${modelConfig["pluginPackageName"]}_${modelConfig["pluginVersion"]}.apk")
        //自定义jar包的名字
    }

    task buildReleaseApkProduce(dependsOn: "buildRelease${cName}ApkProduce") {
        group 'abuildproduceapk'
    }

    // 导入 移除的模块
    apply from: "../host-plugin-config/remoceLabelIcon.gradle"

    afterEvaluate {
        tasks.matching {
            // processDebugManifest
            it.name.startsWith('process') && (it.name.endsWith('ReleaseResources') || it.name.endsWith('DebugResources'))
        }.each { tk ->
            if (tk.name.contains("DebugResources"))
                tk.dependsOn(removeDebugLabelIcon)
            else if (tk.name.contains("ReleaseResources"))
                tk.dependsOn(removeReleaseLabelIcon)
        }
    }
}